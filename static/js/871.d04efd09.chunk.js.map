{"version":3,"file":"static/js/871.d04efd09.chunk.js","mappings":"iQAWaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAmBjB,OACE,SAAC,KAAD,CAAQC,cAAe,CAAEC,KAAM,GAAIC,OAAQ,IAAMC,SAZ9B,SAACC,EAAD,GAA4B,IANhBC,EAMDC,EAAgB,EAAhBA,UAC9B,GAP+BD,EAOFD,EANtBT,EAASY,MACd,qBAAGN,KAAgBO,gBAAkBH,EAAQJ,KAAKO,aAAlD,IAQA,OAFAC,MAAM,GAAD,OAAIL,EAAOH,KAAX,iCACLK,IAGFR,GAASY,EAAAA,EAAAA,IAAWN,IACpBO,QAAQC,IAAIR,GACZE,GACD,EAGC,UACE,UAAC,KAAD,YACE,UAAC,KAAD,oBAEE,SAAC,KAAD,CACEO,KAAK,OACLZ,KAAK,OACLa,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,UAAC,KAAD,qBAEE,SAAC,KAAD,CACEH,KAAK,MACLZ,KAAK,SACLa,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAIZ,SAAC,KAAD,CAAcH,KAAK,SAAnB,6BAIP,E,mBC3DYI,EAAOC,EAAAA,GAAAA,GAAH,qFAMJC,EAAWD,EAAAA,GAAAA,GAAH,6JCHRE,GAHQF,EAAAA,GAAAA,MAAH,0BAGGA,EAAAA,GAAAA,MAAH,4C,UCCLG,EAAS,WACpB,IAAMC,GAAc1B,EAAAA,EAAAA,IAAY2B,EAAAA,IAC1BzB,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAAC,KAAD,mCAEE,SAACqB,EAAD,CAAOP,KAAK,OAAOW,MAAOF,EAAaG,SANtB,SAAAC,GACnB5B,GAAS6B,EAAAA,EAAAA,GAAUD,EAAME,cAAcJ,OACxC,MAOF,E,UCXYK,EAAc,WACzB,IAAM/B,GAAWC,EAAAA,EAAAA,MACXJ,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBiC,GAASlC,EAAAA,EAAAA,IAAY2B,EAAAA,IAarBQ,EAPsB,WAC1B,IAAMC,EAAkBF,EAAOtB,cAC/B,OAAOb,EAASmC,QAAO,SAAAG,GAAO,OAC5BA,EAAQhC,KAAKO,cAAc0B,SAASF,EADR,GAG/B,CAEuBG,GAExB,OACE,UAACC,EAAA,EAAD,CAAKC,GAAG,OAAOC,GAAG,OAAOC,GAAG,OAAOC,GAAG,OAAOC,WAAW,kBAAxD,WACE,SAACpB,EAAD,KACA,SAACJ,EAAD,UACGc,EAAgBW,KAAI,YAA2B,IAAxBzC,EAAuB,EAAvBA,KAAM0C,EAAiB,EAAjBA,GAAIzC,EAAa,EAAbA,OAChC,OACE,UAACiB,EAAD,YACE,4BAAOlB,EAAP,QACA,0BAAOC,KACP,SAAC,KAAD,CAAc0C,QAAS,kBAtBlBC,EAsBiCF,OArBhD7C,GAASgD,EAAAA,EAAAA,IAAcD,IADR,IAAAA,CAsBkB,EAAvB,sBAHaF,EAMlB,QAIR,E,UCdD,EApBiB,WACf,IAAM7C,GAAWC,EAAAA,EAAAA,MACXJ,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBkD,GAAYnD,EAAAA,EAAAA,IAAYoD,EAAAA,IACxBC,GAAQrD,EAAAA,EAAAA,IAAYsD,EAAAA,IAM1B,OAJAC,EAAAA,EAAAA,YAAU,WACRrD,GAASsD,EAAAA,EAAAA,MACV,GAAE,CAACtD,KAGF,UAACsC,EAAA,EAAD,CAAKiB,EAAE,OAAOC,SAAS,OAAOC,QAAQ,OAAtC,WACE,SAAC7D,EAAD,IACCC,EAAS6D,OAAS,IAAK,SAAC3B,EAAD,IACvBkB,IAAcE,IAAS,kDACvBA,IAAS,uBAAIA,MAGnB,C","sources":["components/InputForm/InputForm.jsx","components/ContactList/ContactList.styled.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { selectContacts } from \"redux/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contactsOperations\";\nimport { Formik } from \"formik\";\nimport {\n  StyledForm,\n  StyledField,\n  StyledLable,\n  StyledButton,\n} from \"components/Shareble.styled\";\n\nexport const InputForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const checkContactAvailability = newData => {\n    return contacts.find(\n      ({ name }) => name.toLowerCase() === newData.name.toLowerCase()\n    );\n  };\n\n  const submitHandle = (values, { resetForm }) => {\n    if (checkContactAvailability(values)) {\n      alert(`${values.name} is already in contacts`);\n      resetForm();\n      return;\n    }\n    dispatch(addContact(values));\n    console.log(values);\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={{ name: \"\", number: \"\" }} onSubmit={submitHandle}>\n      <StyledForm>\n        <StyledLable>\n          Name:\n          <StyledField\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </StyledLable>\n\n        <StyledLable>\n          Phone:\n          <StyledField\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </StyledLable>\n\n        <StyledButton type=\"submit\">Add contact</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n};","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  list-style-type: none;\n  padding: 10px;\n  width: 500px;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  justify-content: space-between;\n  margin-top: 0;\n  margin-bottom: 10px;\n`;","import styled from 'styled-components';\n\nexport const Lable = styled.label`\n\n`;\nexport const Input = styled.input`\nmargin-left: 5px;\n`;","import { Input } from \"./Filter.styled\";\nimport { selectFilter } from \"redux/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setFilter } from \"redux/filterSlice\";\nimport { StyledLable } from \"components/Shareble.styled\";\n\nexport const Filter = () => {\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n  return (\n    <StyledLable>\n      Find contact by name\n      <Input type=\"text\" value={filterValue} onChange={changeFilter} />\n    </StyledLable>\n  );\n};","import { List, ListItem } from \"./ContactList.styled\";\nimport { selectContacts, selectFilter } from \"redux/selectors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"redux/contactsOperations\";\nimport { Filter } from \"components/Filter/Filter\";\nimport Box from \"components/Box\";\nimport { StyledButton } from \"components/Shareble.styled\";\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const onDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const getFilteredContacts = () => {\n    const normilizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normilizeFilter)\n    );\n  };\n\n  const visibleContacts = getFilteredContacts();\n\n  return (\n    <Box pt=\"10px\" pr=\"10px\" pb=\"10px\" pl=\"50px\" borderLeft=\"solid black 1px\">\n      <Filter />\n      <List>\n        {visibleContacts.map(({ name, id, number }) => {\n          return (\n            <ListItem key={id}>\n              <span>{name}:</span>\n              <span>{number}</span>\n              <StyledButton onClick={() => onDelete(id)}>Delete</StyledButton>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};","import { InputForm } from \"components/InputForm/InputForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { selectContacts, selectIsLoading, selectError } from \"redux/selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Box from \"components/Box\";\nimport { fetchContacts } from \"redux/contactsOperations\";\nimport { useEffect } from \"react\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box p=\"20px\" fontSize=\"20px\" display=\"flex\">\n      <InputForm />\n      {contacts.length > 0 && <ContactList />}\n      {isLoading && !error && <p>Request in progress...</p>}\n      {error && <b>{error}</b>}\n    </Box>\n  );\n};\n\nexport default Contacts;"],"names":["InputForm","contacts","useSelector","selectContacts","dispatch","useDispatch","initialValues","name","number","onSubmit","values","newData","resetForm","find","toLowerCase","alert","addContact","console","log","type","pattern","title","required","List","styled","ListItem","Input","Filter","filterValue","selectFilter","value","onChange","event","setFilter","currentTarget","ContactList","filter","visibleContacts","normilizeFilter","contact","includes","getFilteredContacts","Box","pt","pr","pb","pl","borderLeft","map","id","onClick","contactId","deleteContact","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","p","fontSize","display","length"],"sourceRoot":""}